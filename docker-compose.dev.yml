# docker-compose.dev.yml
# Service Geliştirme ortamı

networks:
  sentiric-net:
    name: "${NETWORK_NAME:-sentiric-net}"
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}
  
# volumes:
  # [infra]: Temel Altyapı (Infrastructure Layer)
  # --------------------------------------------------

services:
  # [core-service]: Çekirdek Servisler ve Kütüphaneler (Core Layer)
  # -------------------------------------------------- 
  knowledge-service:
    build: { context: ../sentiric-knowledge-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: 
      - "${CONFIG_REPO_PATH}:/sentiric-config:ro"
      - "${CERTIFICATES_REPO_PATH}:/sentiric-certificates:ro"
      - "${ASSETS_REPO_PATH}:/sentiric-assets:ro"
      - "../sentiric-knowledge-data:${KNOWLEDGE_SERVICE_DATA_PATH}"      
    ports: 
      - "12040:${KNOWLEDGE_SERVICE_HTTP_PORT:-12040}"
      - "12041:${KNOWLEDGE_SERVICE_GRPC_PORT:-12041}"
      - "12042:${KNOWLEDGE_SERVICE_METRICS_PORT:-12042}"          
    networks:
      sentiric-net:
        ipv4_address: ${KNOWLEDGE_SERVICE_IPV4_ADDRESS}   
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 12040 && nc -z localhost 12041"]
      interval: 15s
      timeout: 10s
      retries: 5
      # DEĞİŞİKLİK BURADA: Başlangıç periyodunu 10 dakikaya çıkarıyoruz.
      # Bu, yavaş ağlarda bile modelin indirilip yüklenmesi için yeterli zaman tanıyacaktır.
      start_period: 10m     
    # depends_on: 
    #   postgres: { condition: service_healthy }
    #   qdrant: { condition: service_healthy  }     