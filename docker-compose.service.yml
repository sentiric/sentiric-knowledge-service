networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:

services:
  # VERİ KATMANI
  postgres:
    image: postgres:16-alpine
    env_file:
      - ./.env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sentiric-infrastructure/postgres-init:/docker-entrypoint-initdb.d
    # ports:
    #   - "${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - data
    restart: always

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5       

  qdrant:
    image: qdrant/qdrant:latest
    env_file:
      - ./.env.docker    
    ports:
      - "6333:6333"
    networks:
      - sentiric-net
    volumes:
      - qdrant_data:/qdrant/storage
    restart: always
    profiles:
      - default
      - data

    
  knowledge-service:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env.docker
    
    # YENİ: Yerel 'data' klasörünü container içindeki '/app/data' klasörüne bağlıyoruz.
    volumes:
      - ./data:/app/data

    ports:
      - "5055:5055" # .env dosyasındaki port ile tutarlı olsun
    networks:
      - sentiric-net
    profiles:
      - default
      - ai
    restart: always

    # YENİ EKLENEN KISIM:
    # Bu servisin başlamadan önce hem qdrant'ın hem de postgres'in
    # tamamen sağlıklı ve hazır olmasını bekle.
    depends_on:
      qdrant:
        condition: service_started # Qdrant'ın healthcheck'i yok, started yeterli
      postgres:
        condition: service_healthy # Postgres'in healthcheck'i var, healthy olmalı