networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:

services:
  # === POSTGRES ===
  postgres:
    image: postgres:16-alpine
    env_file:
      - ./.env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sentiric-infrastructure/postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === QDRANT ===
  qdrant:
    image: qdrant/qdrant:latest
    env_file:
      - ./.env.docker    
    ports:
      - "${VECTOR_DB_PORT}:${VECTOR_DB_PORT}"
    networks:
      - sentiric-net
    volumes:
      - qdrant_data:/qdrant/storage
    restart: always
    profiles:
      - default
      - data
    # DİKKAT: Qdrant’ın kendi healthcheck’i yok – kaldırıldı

  # === QDRANT HEALTHCHECK ===
  qdrant-healthcheck:
    image: curlimages/curl:latest
    networks:
      - sentiric-net
    depends_on:
      - qdrant
    entrypoint: [ "sh", "-c", "while ! curl -sf http://qdrant:6333/healthz; do sleep 2; done; sleep 9999999" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://qdrant:6333/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - default
      - data


  # === KNOWLEDGE SERVICE ===
  knowledge-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: sentiric-knowledge-service   
    env_file:
      - ./.env.docker
    volumes:
      - ./data:/app/data
    ports:
      - "${KNOWLEDGE_SERVICE_PORT}:${KNOWLEDGE_SERVICE_PORT}"
    networks:
      - sentiric-net
    profiles:
      - default
      - ai
    restart: always
    depends_on:
      qdrant-healthcheck:
        condition: service_healthy
      postgres:
        condition: service_healthy
