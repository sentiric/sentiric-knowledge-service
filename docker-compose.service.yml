networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:

services:
  # === POSTGRES ===
  postgres:
    build: { context: ../sentiric-postgres }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === QDRANT ===
  qdrant:
    build: { context: ../sentiric-qdrant }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["${VECTOR_DB_PORT:-6333}:6333"]
    volumes: [qdrant_data:/qdrant/storage]
    networks: [sentiric-net]
    restart: always  

  # === QDRANT HEALTHCHECK ===
  qdrant-healthcheck:
    image: curlimages/curl:latest
    networks:
      - sentiric-net
    depends_on:
      - qdrant
    entrypoint: [ "sh", "-c", "while ! curl -sf http://qdrant:6333/healthz; do sleep 2; done; sleep 9999999" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://qdrant:6333/healthz" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - default
      - data


  # === KNOWLEDGE SERVICE ===
  knowledge-service:
    build: { context: ../sentiric-knowledge-service }
    env_file: ["${ENV_FILE_PATH}"]
    ports: 
      - "${KNOWLEDGE_SERVICE_PORT:-5055}:5055"
      - "${KNOWLEDGE_SERVICE_GRPC_PORT:-50055}:50055"
    volumes: ["./data:/app/data", "stt-model-cache:/root/.cache/torch"]
    networks: [sentiric-net]
    restart: always
    depends_on: { 
      postgres: { condition: service_healthy }, 
      qdrant: { condition: service_started }
    }
